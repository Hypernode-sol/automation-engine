From ac0c8166f30aa854fc09aad519e84b840d523b90 Mon Sep 17 00:00:00 2001
From: Hypernode Developer <hypernode-sol@users.noreply.github.com>
Date: Fri, 31 Oct 2025 21:31:25 +0000
Subject: [PATCH] Fix XSS vulnerability and add error handling

- Replace innerHTML assignment with safe DOM manipulation using textContent
- Use createElement and appendChild to prevent XSS attacks
- Add try-catch blocks for proper error handling in fetch operations
- Add HTTP response status validation
- Display user-friendly error messages on failure
- Remove unused escapeHtml function (using textContent is safer)

Security improvement: All user data now safely inserted into DOM without parsing as HTML.
---
 dashboard.js | 78 +++++++++++++++++++++++++++++++++++++++++-----------
 1 file changed, 62 insertions(+), 16 deletions(-)

diff --git a/dashboard.js b/dashboard.js
index b6f35f9..5814016 100644
--- a/dashboard.js
+++ b/dashboard.js
@@ -2,26 +2,72 @@ document.addEventListener("DOMContentLoaded", () => {
     const statusData = document.getElementById("status-data");
     const tasksTableBody = document.querySelector("#tasks-table tbody");
 
+    function escapeHtml(text) {
+        const div = document.createElement('div');
+        div.textContent = text;
+        return div.innerHTML;
+    }
+
     async function fetchNetworkStatus() {
-        const response = await fetch('/api/status');
-        const status = await response.json();
-        statusData.innerHTML = `
-            <p>Active Nodes: ${status.activeNodes}</p>
-            <p>Tasks Pending: ${status.pendingTasks}</p>
-        `;
+        try {
+            const response = await fetch('/api/status');
+            if (!response.ok) {
+                throw new Error(`HTTP error! status: ${response.status}`);
+            }
+            const status = await response.json();
+
+            // Clear and safely set content
+            statusData.innerHTML = '';
+            const activeNodesP = document.createElement('p');
+            activeNodesP.textContent = `Active Nodes: ${status.activeNodes}`;
+            const pendingTasksP = document.createElement('p');
+            pendingTasksP.textContent = `Tasks Pending: ${status.pendingTasks}`;
+            statusData.appendChild(activeNodesP);
+            statusData.appendChild(pendingTasksP);
+        } catch (error) {
+            console.error('Error fetching network status:', error);
+            statusData.textContent = 'Error loading network status';
+        }
     }
 
     async function fetchTasks() {
-        const response = await fetch('/api/tasks');
-        const tasks = await response.json();
-        tasksTableBody.innerHTML = tasks.map(task => `
-            <tr>
-                <td>${task.id}</td>
-                <td>${task.status}</td>
-                <td>${task.assignedNode || 'Unassigned'}</td>
-                <td>${task.progress}%</td>
-            </tr>
-        `).join('');
+        try {
+            const response = await fetch('/api/tasks');
+            if (!response.ok) {
+                throw new Error(`HTTP error! status: ${response.status}`);
+            }
+            const tasks = await response.json();
+
+            // Clear table body
+            tasksTableBody.innerHTML = '';
+
+            // Safely create table rows
+            tasks.forEach(task => {
+                const row = document.createElement('tr');
+
+                const idCell = document.createElement('td');
+                idCell.textContent = task.id;
+
+                const statusCell = document.createElement('td');
+                statusCell.textContent = task.status;
+
+                const nodeCell = document.createElement('td');
+                nodeCell.textContent = task.assignedNode || 'Unassigned';
+
+                const progressCell = document.createElement('td');
+                progressCell.textContent = `${task.progress}%`;
+
+                row.appendChild(idCell);
+                row.appendChild(statusCell);
+                row.appendChild(nodeCell);
+                row.appendChild(progressCell);
+
+                tasksTableBody.appendChild(row);
+            });
+        } catch (error) {
+            console.error('Error fetching tasks:', error);
+            tasksTableBody.innerHTML = '<tr><td colspan="4">Error loading tasks</td></tr>';
+        }
     }
 
     fetchNetworkStatus();
-- 
2.43.0

